// Generated by Qodo Gen

import { canJump } from "../src/55.jumpGame";

describe('canJump', () => {

   // Array with single element should return true
   it('should return true when array has single element', () => {
      const nums = [0];
      const result = canJump(nums);
      expect(result).toBe(true);
   });

   // Array with all positive numbers where jumps can reach end
   it('should return true when all numbers are positive and jumps can reach the end', () => {
      const nums = [2, 3, 1, 1, 4];
      const result = canJump(nums);
      expect(result).toBe(true);
   });

   // Array with mixed numbers where path to end exists
   it('should return true when mixed numbers allow a path to the end', () => {
      const nums = [3, 2, 1, 0, 4];
      const result = canJump(nums);
      expect(result).toBe(false);
   });

   // Array where optimal path requires smaller jumps than maximum
   it('should return true when optimal path requires smaller jumps than maximum', () => {
      const nums = [2, 3, 1, 1, 4];
      const result = canJump(nums);
      expect(result).toBe(true);
   });
});
