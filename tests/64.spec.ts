// Generated by Qodo Gen

import { minPathSum } from "../src/64.minimumPathSum";

describe('minPathSum', () => {

    // Calculate minimum path sum for a 2x2 grid with positive integers
    it('should return minimum path sum for 2x2 grid with positive integers', () => {
      const grid = [
        [1, 3],
        [1, 5]
      ];
  
      const result = minPathSum(grid);
  
      expect(result).toBe(7);
    });

    // Handle grid with all zero values
    it('should return 0 for grid with all zero values', () => {
      const grid = [
        [0, 0],
        [0, 0]
      ];
  
      const result = minPathSum(grid);
  
      expect(result).toBe(0);
    });

    // Calculate minimum path sum for a larger grid (e.g. 3x3) with varied positive numbers
    it('should calculate minimum path sum for a 3x3 grid with varied positive numbers', () => {
      const grid = [
        [1, 3, 1],
        [1, 5, 1],
        [4, 2, 1]
      ];
      const result = minPathSum(grid);
      expect(result).toBe(7);
    });

    // Calculate minimum path sum when only one path is possible
    it('should calculate minimum path sum when only one path is possible', () => {
      const grid = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
      ];
      const result = minPathSum(grid);
      expect(result).toBe(21);
    });

    // Calculate minimum path sum when all grid values are the same
    it('should calculate minimum path sum when all grid values are the same', () => {
      const grid = [
        [2, 2, 2],
        [2, 2, 2],
        [2, 2, 2]
      ];
      const result = minPathSum(grid);
      expect(result).toBe(10);
    });
});
